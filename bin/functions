#!/usr/bin/env node

/**
 * Copyright 2017, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const colors = require('colors');

/**
 * 1. Verify the version of Node.js being used.
 */
const semver = require('semver');
if (!semver.satisfies(process.version, '>= 6.11.5')) {
  console.error('Node.js v6.11.5 or greater is required to run the Emulator!');
  process.exit(1);
}

if (semver.satisfies(process.version, '>= 7.0.0')) {
  console.log(`Warning: You're using Node.js ${process.version} but Google Cloud Functions only supports v6.11.5.`);
}

/**
 * 2. Verify the version of the Emulator and CLI match.
 */
const path = require('path');
const Configstore = require('configstore');
const defaults = require('../src/defaults.json');
const pkg = require('../package.json');
const server = new Configstore(path.join(pkg.name, '/.active-server'));

if (server.get('started')) {
  if (server.get('pid')) {
    if (!server.get('stopped')) {
      const emulatorVersion = server.get('version');
      const cliVersion = pkg.version;

      if (!semver.satisfies(emulatorVersion, `${cliVersion}`)) {
        console.error(`The version of the currently running Emulator ${emulatorVersion ? '(' + emulatorVersion + ')' : ''}does not match that of your CLI (${cliVersion}). Please shutdown any running Emulator processes (${'"functions kill"'.bold}) and restart the Emulator (${'"functions start"'.bold}).`);
      }
    } else {
      /**
       * 2a. Verify there isn't an orphaned Emulator process.
       */
      if (server.get('pid')) {
        console.error(`Warning: You either have an orphaned Emulator process (PID: ${server.get('pid')}) or the previously running Emulator process was not shutdown properly, please verify: ${'"functions kill"'.bold} and ${'"functions start"'.bold}.`);
      }
    }
  }
}

/**
 * 3. Ensure a project ID is configured.
 */
const prompt = require('prompt');
const config = require('../src/config');
const gcloudProjecId = require('../src/utils/getGcloudProjecId')();
let projectId = require('../src/utils/detectProjectId')(config.get('projectId'));

const askChangeProjectId = () => {
  return new Promise((resolve, reject) => {
    const message =  `
${'Emulator\'s project id is not same to gcloud\'s project id. Do you want to change project id to '.bold + gcloudProjecId.green + ' ?'.bold} 
------------------------------------
current project id:
  emulator:  ${projectId.green}
  gcloud:    ${gcloudProjecId.green}
------------------------------------
`.bold;

    prompt.message = message;
    prompt.start();
    const schema = {
      name: 'doChange',
      validator: /y[es]*|n[o]?/,
      warning: 'Must respond yes(y) or no(n)',
      default: 'no'
    };
    prompt.get([schema], (err, result) => {
      if (err) {
        reject(err);
      } else {
        const doChange = /y[es]*/.test(result.doChange);
        if (doChange) {
          resolve(gcloudProjecId);
        } else {
          resolve(projectId);
        }
      }
    });
  });
};

const askInputProjectId = () => {
  return new Promise((resolve, reject) => {
    prompt.start();
    prompt.message = 'Enter a projectId to get started'.bold;
    prompt.get([
      {
        name: 'projectId',
        required: true
      }
    ], (err, result) => {
      if (err) {
        reject(err);
      } else if (result.projectId) {
        resolve(result.projectId);
      } else {
        getProjectId().then(resolve, reject);
      }
    });
  });
};

const getProjectId = () => {
  return new Promise((resolve, reject) => {
    if (projectId) {
      if (projectId !== gcloudProjecId) {
        askChangeProjectId()
          .then((gcloudProjecId) => {
              resolve(gcloudProjecId);
          })
          .catch(console.error);
      } else {
        resolve(projectId);
      }
    } else {
      askInputProjectId()
        .then((projectId) => {
          resolve(projectId);
        })
        .catch(console.error);
    }
  });
}

/**
 * 4. Get and save the user's project ID, then run the CLI.
 */
getProjectId()
  .then((projectId) => {
    // Save the project ID so the user doesn't need to be prompted again
    config.set('projectId', projectId);

    // Run the CLI
    require('../src/cli').main(process.argv.slice(2));
  })
  .catch(console.error);
